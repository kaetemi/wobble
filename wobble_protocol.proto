/*
Copyright (C) 2020  Jan BOON (Kaetemi) <jan.boon@kaetemi.be>
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.
3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

syntax = "proto3";

import "nanopb.proto";

enum MessageType {
    UNDEFINED_MESSAGE = 0;

    // Messages for writing to the server
    OPEN_STREAM = 1;
    WRITE_FRAME = 2;
    CLOSE_STREAM = 3;

    // Messages for streaming from the server
    SUBSCRIBE_STREAM_LIST = 4;
    // UNSUBSCRIBE_STREAM_LIST = 5;
    PUBLISH_STREAM = 6;
    SUBSCRIBE = 7;
    UNSUBSCRIBE = 8;
    PUBLISH_FRAME = 9;

    // Messages for querying older frames from the server
    // QUERY_FRAMES = 10;
    QUERY_CACHE = 11;
    RESULT_FRAME = 12;
    RESULT_DONE = 13;
}

enum SensorType {
    UNDEFINED_SENSOR = 0;

    ACCELEROMETER = 1;
    TEMPERATURE = 2;
    HUMIDITY = 3;
    // COLOR = 4;
}

enum Unit {
    UNDEFINED_UNIT = 0;

    G = 1; // acceleration
    CELSIUS = 2; // temperature
    RELATIVE_HUMIDITY = 3;
}

message UndefinedMessage {
    MessageType message_type = 1;
    // reserve 2 and 3 for future
}

// Stream info
message StreamInfo {
    string name = 4 [(nanopb).max_size = 64]; // internal name
    int32 channels = 7; // 3 for accelerometer
    int32 frequency = 8; // 1100hz for example
    int32 bits = 9; // used bits
    int64 timestamp = 13; // timestamp in microseconds when the stream starts
    int32 timestamp_precision = 22; // 1000000 for precision of +-1s (NTP...)

    SensorType sensor = 25;
    string hardware = 26 [(nanopb).max_size = 64]; // chip identifier, etc.
    Unit unit = 27;
    float scale = 28; // scale in units over the positive bit range
    float zoom = 29; // how much to zoom by default
    repeated int32 zero = 30 [(nanopb).max_count = 4]; // point which should be zero
    double latitude = 23;
    double longitude = 24;

    string description = 14 [(nanopb).max_size = 64]; // display name
    repeated string channel_descriptions = 15 [(nanopb).max_size = 64, (nanopb).max_count = 4]; // but count must match channels value
}

// Open a stream for writing from a sensor
message OpenStream {
    MessageType message_type = 1;
    StreamInfo info = 16;
    string password = 5 [(nanopb).max_size = 64];
    int32 alias = 6; // numeric value that will be used for this stream
}

message ChannelData {
    repeated sint32 data = 12 [(nanopb).max_count = 64];
}

// Write a frame to a stream
message WriteFrame {
    MessageType message_type = 1;
    int32 alias = 6;
    repeated ChannelData channels = 19 [(nanopb).max_count = 4];
}

// Close a stream
// You should restart a stream anytime the stream timestamp starts drifting off
message CloseStream {
    MessageType message_type = 1;
    int32 alias = 6;
}

// List all the streams on this server, and list future streams
// All the streams are public
message SubscribeStreamList {
    MessageType message_type = 1;
}

message PublishStream {
    MessageType message_type = 1;
    StreamInfo info = 17;
}

// Subscribe to new frames
message Subscribe {
    MessageType message_type = 1;
    string name = 4 [(nanopb).max_size = 64]; // internal name
}

// Unsubscribe to new frames
message Unsubscribe {
    MessageType message_type = 1;
    string name = 4 [(nanopb).max_size = 64]; // internal name
}

message PublishFrame {
    MessageType message_type = 1;
    string name = 4 [(nanopb).max_size = 64]; // internal name
    int64 timestamp = 13; // timestamp for this particular frame in microseconds realtime
    int32 offset = 18; // sample offset in the current series, may reset if the source drops (like timestamp, but counting samples from 0)
    repeated ChannelData channels = 19 [(nanopb).max_count = 4];
}

message QueryFrames {
    MessageType message_type = 1;
    string name = 4 [(nanopb).max_size = 64]; // internal name
    int64 from_timestamp = 20; // must be set
    int64 to_timestamp = 21; // if 0, all the way until the latest
}

message QueryCache {
    MessageType message_type = 1;
    string name = 4 [(nanopb).max_size = 64]; // internal name
}

/*
// use PublishFrame
message ResultFrame {
    MessageType message_type = 1;
    string name = 4 [(nanopb).max_size = 64]; // internal name
    int64 timestamp = 13; // timestamp for this particular frame in microseconds realtime
    int32 offset = 18; // sample offset in the current series, may reset if the source drops (like timestamp, but counting samples from 0)
    repeated ChannelData channels = 19 [(nanopb).max_count = 4];
}
*/

message ResultDone {
    MessageType message_type = 1;
    string name = 4 [(nanopb).max_size = 64]; // internal name
}

/* end of file */
