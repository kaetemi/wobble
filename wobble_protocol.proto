syntax = "proto3";

enum MessageTypes {
    UNDEFINED = 0;

    // Messages for writing to the server
    OPEN_STREAM = 1;
    WRITE_FRAME = 2;
    CLOSE_STREAM = 3;

    // Messages for streaming from the server
    LIST_STREAMS = 4;
    STREAM_LIST = 5;
    SUBSCRIBE = 7;
    UNSUBSCRIBE = 8;
    PUBLISH_FRAME = 9;

    // Messages for querying older frames from the server
    QUERY_FRAMES = 10;
}

message UndefinedMessage {
    MessageTypes message_type = 1;
}

// Stream info
message StreamInfo {
    string name = 4; // internal name
    int8 alias = 6; // numeric value that will be used for this stream
    int8 channels = 7; // 3 for accelerometer
    int32 frequency = 8; // 1100hz for example
    int8 bits = 9; // used bits
    int64 timestamp = 13; // timestamp in microseconds when the stream starts
    int32 timestamp_precision = 22; // 1000000 for precision of +-1s (NTP...)

    string description = 14; // display name
    repeated string channel_descriptions = 15; // optional but count must match channels value
}

// Open a stream for writing from a sensor
message OpenStream {
    MessageTypes message_type = 1;
    StreamInfo info = 16;
    string password = 5;
}

message ChannelData {
    repeated uint8 data_8bit = 10;
    repeated uint16 data_16bit = 11;
    repeated uint32 data_32bit = 12;
}

// Write a frame to a stream
message WriteFrame {
    MessageTypes message_type = 1;
    int8 alias = 6;
    repeated ChannelData channels = 19;
}

// Close a stream
// You should restart a stream anytime the stream timestamp starts drifting off
message CloseStream {
    MessageTypes message_type = 1;
}

// List all the streams on this server
// All the streams are public
message ListStreams {
    MessageTypes message_type = 1;
}

// Response with the list of streams
message StreamList {
    MessageTypes message_type = 1;
    repeated StreamInfo streams = 17;
}

// Subscribe to new frames
message Subscribe {
    MessageTypes message_type = 1;
    string name = 4; // internal name
}

// Unsubscribe to new frames
message Unsubscribe {
    MessageTypes message_type = 1;
    string name = 4; // internal name
}

message PublishFrame {
    MessageTypes message_type = 1;
    int64 timestamp = 13; // timestamp for this particular frame in microseconds realtime
    int32 offset = 18; // sample offset in the current series, may reset if the source drops (like timestamp, but counting samples from 0)
    repeated ChannelData channels = 19;
}

message QueryFrames {
    string name = 4; // internal name
    int64 from_timestamp = 20; // must be set
    int64 to_timestamp = 21; // if 0, all the way until the latest
}

/* end of file */
